@page "/read-me"
@inherits BaseComponent
@inject IJSRuntime JS
<ReusableCard Title="Những tính năng trong dự án">
    <ContentItem Title="Hướng dẫn Authentication trong Blazor WebAssembly bằng JWT">
        <span class="content-title">Mục tiêu</span>
        <div class="content-body">
            <pre>
                <code class="typescript">
🎯 Mục tiêu
- Giải thích từng bước để:
+ Blazor WebAssembly đăng nhập qua API

+ Nhận và lưu token JWT

+ Quản lý trạng thái đăng nhập

+ Điều hướng người dùng chưa đăng nhập về trang login

🧠 Cần hiểu trước:
+ Blazor WebAssembly: chạy C# trong trình duyệt như một SPA (Single Page App)
+ JWT (JSON Web Token): một chuỗi mã hóa chứa thông tin người dùng
+ API: dịch vụ backend xác thực người dùng và trả về JWT
+ AuthenticationStateProvider: hệ thống của Blazor dùng để kiểm tra người dùng đã đăng nhập hay chưa

🛠 Các bước triển khai
✅ Bước 1: Tạo API trả về JWT
+ Giả sử bạn đang dùng ASP.NET Core Web API. Đây là các bước cụ thể để tạo một API có thể đăng nhập và trả về JWT.
🔧 1. Cài thư viện JWT
+ dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer

🧱 2. Cấu hình trong appsettings.json
"Jwt": {
  "Key": "super_secret_key_12345",
  "Issuer": "myapp",
  "Audience": "myapp_users",
  "ExpiresInMinutes": 60
}

⚙️ 3. Cấu hình JWT trong Program.cs

builder.Services.Configure&lt;JwtSettings&gt;(builder.Configuration.GetSection("Jwt"));
builder.Services.AddAuthentication("Bearer")
    .AddJwtBearer("Bearer", options =>
    {
        var jwt = builder.Configuration.GetSection("Jwt");
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwt["Issuer"],
            ValidAudience = jwt["Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwt["Key"]))
        };
    });

⚠️ Đừng quên gọi:
app.UseAuthentication();
app.UseAuthorization();

🧑‍💻 4. Viết API Login Controller
+ Tạo class setting
public class JwtSettings
{
    public string Key { get; set; }
    public string Issuer { get; set; }
    public string Audience { get; set; }
    public int ExpiresInMinutes { get; set; }
}

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly JwtSettings _jwt;

    public AuthController(JwtSettings jwt)
    {
        _jwt = jwt;
    }

    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginModel model)
    {
        // Kiểm tra thông tin đăng nhập giả lập
        if (model.Username == "admin" && model.Password == "123")
        {
            var token = GenerateJwtToken(model.Username);
            var refreshToken = Guid.NewGuid().ToString(); // ví dụ đơn giản

            return Ok(new
            {
                Token = token,
                RefreshToken = refreshToken
            });
        }

        return Unauthorized("Tài khoản hoặc mật khẩu không đúng.");
    }

    private string GenerateJwtToken(string username)
    {
        var claims = new[]
        {
            new Claim(ClaimTypes.Name, username),
            new Claim(ClaimTypes.Role, "admin")
        };

        // Thêm từng role như 1 claim riêng(nếu nhiêu role)
        foreach (var role in roles)
        {
            claims.Add(new Claim(ClaimTypes.Role, role));
        }

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwt.Key));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer: _jwt.Issuer,
            audience: _jwt.Audience,
            claims: claims,
            expires: DateTime.UtcNow.AddMinutes(_jwt.ExpiresInMinutes),
            signingCredentials: creds
        );

        return new JwtSecurityTokenHandler().WriteToken(token);
    }
}


✅ Bước 2: Tạo giao diện đăng nhập trong Blazor WebAssembly
🎯 Mục tiêu:
+ Cho người dùng nhập username và password, gửi yêu cầu đến API, nhận lại JWT token và lưu lại để sử dụng về sau.
🧩 1. Tạo Login.razor

 private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("https://your-api-url/api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
           
            await AuthProvider.MarkUserAsAuthenticated(response.data);

            Navigation.NavigateTo("/");
        }
        else
        {
            // TODO: Thông báo lỗi
        }
    }

+ Gọi service đăng nhập khi đăng nhập thành công

✅ Bước 3: Lưu JWT token vào LocalStorage và xác thực người dùng
🎯 Mục tiêu:
+ Lưu JWT vào trình duyệt (LocalStorage)
+ Khi người dùng truy cập lại, hệ thống vẫn nhớ họ đang đăng nhập

🧩 Tạo CustomAuthStateProvider.cs (1)
public class CustomAuthStateProvider : AuthenticationStateProvider
{
    private readonly ILocalStorageService _localStorage;
    private ClaimsPrincipal _anonymous = new(new ClaimsIdentity());

    public CustomAuthStateProvider(ILocalStorageService localStorage)
    {
        _localStorage = localStorage;
    }

    public override async Task&lt;AuthenticationState&gt; GetAuthenticationStateAsync()
    {
        var token = await _localStorage.GetItemAsync&lt;string&gt;("authToken");

        if (string.IsNullOrWhiteSpace(token))
            return new AuthenticationState(_anonymous);

        var identity = new ClaimsIdentity(ParseClaimsFromJwt(token), "jwt");
        var user = new ClaimsPrincipal(identity);

        return new AuthenticationState(user);
    }

    public async Task MarkUserAsAuthenticated(object data)
    {
        await _localStorage.SetItemAsync("authToken", data.token);
        await _localStorage.SetItemAsync("refreshToken", data.refreshToken);

        var identity = new ClaimsIdentity(ParseClaimsFromJwt(token), "jwt");
        var user = new ClaimsPrincipal(identity);

        NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(user)));
    }

    public async Task MarkUserAsLoggedOut()
    {
        await _localStorage.RemoveItemAsync("authToken");
        await _localStorage.RemoveItemAsync("refreshToken");

        NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(_anonymous)));
    }

    private IEnumerable&lt;Claim> ParseClaimsFromJwt(string jwt)
    {
        var payload = jwt.Split('.')[1];
        var jsonBytes = ParseBase64WithoutPadding(payload);
        var keyValuePairs = JsonSerializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(jsonBytes);

        var claims = new List&lt;Claim>();
        if (keyValuePairs.TryGetValue(ClaimTypes.Role, out var roles))
        {
            // Nếu roles là 1 mảng
            if (roles.ValueKind == JsonValueKind.Array)
            {
                foreach (var role in roles.EnumerateArray())
                {
                    claims.Add(new Claim(ClaimTypes.Role, role.GetString()));
                }
            }
            else
            {
                // Nếu chỉ là 1 role đơn
                claims.Add(new Claim(ClaimTypes.Role, roles.GetString()));
            }

            keyValuePairs.Remove(ClaimTypes.Role);
        }

        foreach (var kvp in keyValuePairs)
        {
            claims.Add(new Claim(kvp.Key, kvp.Value.ToString()));
        }

        return claims;
    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        base64 = base64.Replace('-', '+').Replace('_', '/');
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }

        return Convert.FromBase64String(base64);
    }
}

🧩 Đăng ký CustomAuthStateProvider trong Program.cs
builder.Services.AddAuthorizationCore();
builder.Services.AddScoped&lt;AuthenticationStateProvider, CustomAuthStateProvider&gt;();
builder.Services.AddScoped&lt;CustomAuthStateProvider&gt;();
builder.Services.AddBlazoredLocalStorage();

✅ Bước 4: Bảo vệ route bằng [Authorize] và điều hướng người dùng
🧩 Sử dụng trong trang
🧩 App.razor xử lý chưa đăng nhập
&lt;CascadingAuthenticationState>
            &lt;Router AppAssembly="typeof(Program).Assembly">
            &lt;Found Context="routeData">
                &lt;AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(MainLayout)">
                &lt;NotAuthorized>
                    &lt;RedirectToLogin />
                &lt;/NotAuthorized>
                &lt;Authorizing>
                    <p>Đang xác thực...</p>
                &lt;Authorizing>
                &lt;/AuthorizeRouteView>
            &lt;/Found>
            &lt;NotFound>
                &lt;LayoutView Layout="typeof(MainLayout)">
                    <p>Không tìm thấy trang</p>
                &lt;/LayoutView>
            &lt;/NotFound>
    &lt;/Router>
&lt;/CascadingAuthenticationState>


                </code>
            </pre>
        </div>
    </ContentItem>
</ReusableCard>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("hljs.highlightAll");
        }
    }
}
