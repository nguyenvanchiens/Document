@page "/BlazorImportant"
@inherits BaseComponent
@inject IJSRuntime JS
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="header"><h2>Khi bạn bắt đầu một web Blazor cần chú ý những gì?</h2></div>
                <div class="content">
                    <div class="content-item">
                        <span class="content-title">Các hàm tiện ích</span>
                        <div class="content-body">
                            <ul>
                                <li>
                                    1. Hiểu đúng; Blazor là gì?
                                    <pre><code>
- Blazor = Single Page Application framework của .Net
- Viết UI bằng Razor + C#
- Có 2 kiểu chính: Blazor Server (render ở server, gửi DOM diff qua signalR)
- Blazor WebAssemby(WASM) (Chạy c# ngay trên browser)

* Bạn cần quyết định Server hay WASM
- Server: Tải nhanh, SEO tốt, .NET full stack
- WASM: chạy offline, hosting tĩnh, nhưng nặng hơn lúc load đầu tiên
                                        </code></pre>
                                </li>
                                <li>
                                    2. Những file & folder quan trọng cần hiểu
                                    <pre><code class="language-text">
- App.razor : Entry poin của app. Chứa Router và global wrappers (auth, store....).
- _Imports.razor: Chứa các using & namespace dùng chung cho tất cả các Razor files
- MainLayout.razor: Layout mặc định cho app (kiểu master page).
- Pages/ : Tất cả các component có router (page) - trang chính của app
- wwwroot/ : Static files (css, image, js...)
- Program.cs : Khỏi tạo DI container, routing, auth, ...(startup logic).
- _Host.cshtml (server) - Razor page bọc blazor khi chạy server - chửa App component
- index.html (WASM) : HTML entrypoin khi chạy WebAssembly
                                    </code></pre>
                                </li>
                                <li>
                                    3. Bạn phải hiểu về vòng đời component (quan trọng)
                                    <pre><code class="language-text">
- Một component Blazor có 3 vòng đời
* OnInitialized / OnInitializedAsync -> Chạy lúc khởi tạo
* OnparameterSet / OnparameterSetAsync -> Khi params thay đổi
* OnAfterRender / OnAfterRenderAsync -> Khi render xong
* Dispose -> Khi bị huỷ
                                    </code></pre>
                                </li>
                                <li>
                                    4. Authentication & Authorization
                                    <pre><code class="language-text">
- thường sẽ cần CascadingAuthenticationState & AuthorizeRouteView trong App.razor
- Có thể dùng Microsoft.AspNetCore.Components.Authorization
                                    </code></pre>
                                </li>
                                <li>
                                    5. State Management
                                    <pre><code class="language-text">
- Dữ liệu giữa các Component -> Có thể dùng
+ DI + singleton service
+ CascadingValue
+ Fluxor / Redux-style state management
                                    </code></pre>
                                </li>
                                <li>
                                    6. Routing
                                    <pre><code class="language-text">
+ Route được xác định bằng page directive
+ App sẽ tìm trong AppAssembly các component có page
                                    </code></pre>
                                </li>
                                <li>
                                    7. JS Interop
                                    <pre><code class="language-text">
+ Khi cần làm gì mà C# không làm được trên browser (ví dụ Clipboard, Notifications) 
→ gọi JavaScript qua IJSRuntime
                                    </code></pre>
                                </li>
                                <li>
                                    8. Hosting & Deployment
                                    <pre><code class="language-text">
+ Server: deploy như ASP.NET MVC.
+ WASM: chỉ cần upload wwwroot (giống SPA JS).
                                    </code></pre>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="content-item">
                        <div class="content-body">
                            <ul>
                                <li>
                                    <h2>Các bước chi tiết từ A → Z để bạn triển khai Blazor WebAssembly + JWT + AuthenticationStateProvider</h2>
                                    <pre><code class="language-text">
+ Với tình huống:
✅ User login → nhận accessToken + refreshToken → lưu → xác thực.
✅ Khi chưa login, vào trang [Authorize] → tự redirect về /login.
✅ Có thể fake claims để test nếu muốn.

🔷 1 — Backend chuẩn bị
| API                  | Input                                      | Output                          |
| -------------------- | ------------------------------------------ | ------------------------------- |
| `/api/login`         | username + password                        | `{ accessToken, refreshToken }` |
| `/api/refresh-token` | refreshToken                               | `{ accessToken, refreshToken }` |
| Các API khác         | header `Authorization: Bearer accessToken` | dữ liệu                         |

🔷 2️ — Cài package cho Blazor
- dotnet add package Blazored.LocalStorage

🔷 3️ — Cấu hình Program.cs
- builder.Services.AddAuthorizationCore();
- builder.Services.AddBlazoredLocalStorage();

// đăng ký custom AuthStateProvider
- builder.Services.AddScoped'CustomAuthStateProvider>();
- builder.Services.AddScoped'AuthenticationStateProvider>(sp => sp.GetRequiredService'CustomAuthStateProvider>());

// service gọi API
- builder.Services.AddScoped'UserWebService>();


🔷 4️ — App.razor
&lt;CascadingAuthenticationState&gt;
    &lt;Router AppAssembly=&quot;typeof(Program).Assembly&quot;&gt;
        &lt;Found Context=&quot;routeData&quot;&gt;
            &lt;AuthorizeRouteView RouteData=&quot;routeData&quot; DefaultLayout=&quot;typeof(MainLayout)&quot;&gt;
                &lt;NotAuthorized&gt;
                    &lt;RedirectToLogin /&gt;
                &lt;/NotAuthorized&gt;
                &lt;Authorizing&gt;
                    &lt;p&gt;Đang kiểm tra đăng nhập...&lt;/p&gt;
                &lt;/Authorizing&gt;
            &lt;/AuthorizeRouteView&gt;
        &lt;/Found&gt;
        &lt;NotFound&gt;
            &lt;LayoutView Layout=&quot;typeof(MainLayout)&quot;&gt;
                &lt;p&gt;Không tìm thấy trang.&lt;/p&gt;
            &lt;/LayoutView&gt;
        &lt;/NotFound&gt;
    &lt;/Router&gt;
&lt;/CascadingAuthenticationState&gt;

🔷 5️ — RedirectToLogin.razor
inject NavigationManager Navigation

code {
        protected override void OnInitialized()
        {
                Navigation.NavigateTo("/login", true);
        }
}

🔷 6️— UserWebService.cs
public class UserWebService
{
    private readonly HttpClient _http;

    public UserWebService(HttpClient http)
    {
        _http = http;
    }

    public async Task 'string AccessToken, string RefreshToken)?> LoginAsync(string username, string password)
    {
        var response = await _http.PostAsJsonAsync("/api/login", new { username, password });
        if (!response.IsSuccessStatusCode) return null;

        var result = await response.Content.ReadFromJsonAsync'LoginResponse>();
        return (result!.AccessToken, result.RefreshToken);
    }

    public async Task'LoginResponse?> RefreshTokenAsync(string refreshToken)
    {
        var response = await _http.PostAsJsonAsync("/api/refresh-token", new { refreshToken });
        if (!response.IsSuccessStatusCode) return null;

        return await response.Content.ReadFromJsonAsync'LoginResponse>();
    }
}

public class LoginResponse
{
    public string AccessToken { get; set; } = "";
    public string RefreshToken { get; set; } = "";
}

🔷 7️— CustomAuthStateProvider.cs
using Blazored.LocalStorage;
using Microsoft.AspNetCore.Components.Authorization;
using System.Security.Claims;
using System.Text.Json;

public class CustomAuthStateProvider : AuthenticationStateProvider
{
    private readonly ILocalStorageService _localStorage;
    private readonly UserWebService _userService;

    public CustomAuthStateProvider(ILocalStorageService localStorage, UserWebService userService)
    {
        _localStorage = localStorage;
        _userService = userService;
    }

    public override async Task'AuthenticationState> GetAuthenticationStateAsync()
    {
        var token = await _localStorage.GetItemAsync'string>("authToken");

        if (string.IsNullOrWhiteSpace(token))
            return Anonymous();

        if (IsTokenExpired(token))
        {
            var refreshToken = await _localStorage.GetItemAsync'string>("refreshToken");
            var rs = await _userService.RefreshTokenAsync(refreshToken ?? "");
            if (rs != null)
            {
                token = rs.AccessToken;
                refreshToken = rs.RefreshToken;
                await _localStorage.SetItemAsync("authToken", token);
                await _localStorage.SetItemAsync("refreshToken", refreshToken);
            }
            else
            {
                await _localStorage.RemoveItemAsync("authToken");
                return Anonymous();
            }
        }

        var identity = new ClaimsIdentity(ParseClaimsFromJwt(token), "jwt");
        return new AuthenticationState(new ClaimsPrincipal(identity));
    }

    public async Task MarkUserAsAuthenticated(string token, string refreshToken, bool fake = false)
    {
        await _localStorage.SetItemAsync("authToken", token);
        await _localStorage.SetItemAsync("refreshToken", refreshToken);

        ClaimsIdentity identity;

        if (fake)
        {
            identity = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, "admin"),
                new Claim(ClaimTypes.Role, "Administrator")
            }, "fake");
        }
        else
        {
            identity = new ClaimsIdentity(ParseClaimsFromJwt(token), "jwt");
        }

        var user = new ClaimsPrincipal(identity);

        NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(user)));
    }

    public async Task MarkUserAsLoggedOut()
    {
        await _localStorage.RemoveItemAsync("authToken");
        await _localStorage.RemoveItemAsync("refreshToken");

        NotifyAuthenticationStateChanged(Task.FromResult(Anonymous()));
    }

    private AuthenticationState Anonymous()
    {
        return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));
    }

    private bool IsTokenExpired(string jwt)
    {
        try
        {
            var payload = jwt.Split('.');
            if (payload.Length != 3) return true;

            var jsonBytes = ParseBase64WithoutPadding(payload[1]);
            var keyValuePairs = JsonSerializer.Deserialize'Dictionary'string, JsonElement>>(jsonBytes);

            if (keyValuePairs != null && keyValuePairs.TryGetValue("exp", out var expValue))
            {
                var exp = expValue.GetInt64();
                return DateTimeOffset.FromUnixTimeSeconds(exp) 'nhỏ hơn= DateTimeOffset.UtcNow;
            }
        }
        catch
        {
            return true;
        }
        return true;
    }

    private IEnumerable'Claim> ParseClaimsFromJwt(string jwt)
    {
        var claims = new List'Claim>();

        var payload = jwt.Split('.');
        if (payload.Length != 3) return claims;

        var jsonBytes = ParseBase64WithoutPadding(payload[1]);
        var keyValuePairs = JsonSerializer.Deserialize'Dictionary'string, object>>(jsonBytes);

        if (keyValuePairs != null)
        {
            foreach (var kvp in keyValuePairs)
            {
                claims.Add(new Claim(kvp.Key, kvp.Value?.ToString() ?? ""));
            }
        }

        return claims;
    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        base64 = base64.Replace('-', '+').Replace('_', '/');
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }
}

🔷 8️ — Login.razor
page &quot;/login&quot;
inject CustomAuthStateProvider AuthProvider
inject NavigationManager Navigation
inject UserWebService UserService

&lt;h3&gt;Đăng nhập&lt;/h3&gt;

&lt;input bind=&quot;Username&quot; /&gt;
&lt;input bind=&quot;Password&quot; type=&quot;password&quot; /&gt;
&lt;button onclick=&quot;Login&quot;&gt;Đăng nhập&lt;/button&gt;

if (!string.IsNullOrEmpty(ErrorMessage))
{
    &lt;p style=&quot;color:red&quot;&gt;ErrorMessage&lt;/p&gt;
}

code {
    string Username = &quot;&quot;;
    string Password = &quot;&quot;;
    string ErrorMessage = &quot;&quot;;

    async Task Login()
    {
        var result = await UserService.LoginAsync(Username, Password);
        if (result != null)
        {
            await AuthProvider.MarkUserAsAuthenticated(result.Value.AccessToken, result.Value.RefreshToken);
            Navigation.NavigateTo(&quot;/&quot;);
        }
        else
        {
            ErrorMessage = &quot;Sai tên đăng nhập hoặc mật khẩu&quot;;
        }
    }
}

🔷 9️ — Logout (ví dụ ở MainLayout)
&lt;button onclick=&quot;Logout&quot;&gt;Đăng xuất&lt;/button&gt;

code {
        [Inject] CustomAuthStateProvider AuthProvider { get; set; }
        [Inject] NavigationManager Navigation { get; set; }

        async Task Logout()
        {
                await AuthProvider.MarkUserAsLoggedOut();
                Navigation.NavigateTo(&quot;/ login & quot;, true);
        }
}

                                    </code></pre>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("hljs.highlightAll");
        }
    }
}